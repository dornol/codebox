package dev.dornol.codebox.jpatypedid;

import dev.dornol.codebox.jpatypedid.entity.Member;
import dev.dornol.codebox.jpatypedid.entity.MemberId;
import dev.dornol.codebox.jpatypedid.entity.Team;
import dev.dornol.codebox.jpatypedid.entity.TeamId;
import dev.dornol.codebox.jpatypedid.repository.MemberRepository;
import dev.dornol.codebox.jpatypedid.repository.TeamRepository;
import jakarta.persistence.EntityManager;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@Transactional
@SpringBootTest
class JpaTypedIdApplicationTests {

    @Autowired
    MemberRepository memberRepository;

    @Autowired
    TeamRepository teamRepository;

    @Autowired
    EntityManager entityManager;

    @Test
    @DisplayName("GeneratedValue 정상 작동 확인")
    void generatedValueTest() {
        //given
        int count = 1000;

        //when
        List<Member> members = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            members.add(new Member("name ... " + i, "tel ... " + i));
        }
        memberRepository.saveAll(members);
        entityManager.flush();
        entityManager.clear();

        //then
        List<Member> freshMembers = memberRepository.findAll();
        assertThat(freshMembers).hasSize(count).noneMatch(it -> it.getId() == null);
    }

    @Test
    @DisplayName("Member 저장 후 ID로 다시 조회되는지 확인")
    void memberIdTestByAutoGeneratedId() {
        //given
        Member member = new Member("name1", "tel1");

        //when
        memberRepository.save(member);
        entityManager.flush();
        entityManager.clear();

        //then
        Member freshMember = memberRepository.findById(MemberId.of(member.getId().getValue())).orElseThrow();
        assertThat(freshMember.getId()).isEqualTo(member.getId());
        assertThat(freshMember.getName()).isEqualTo(member.getName());
        assertThat(freshMember.getTel()).isEqualTo(member.getTel());
    }

    @Test
    @DisplayName("Team 저장 후 ID로 다시 조회되는지 확인")
    void teamIdTestByManualId() {
        //given
        TeamId teamId = TeamId.of(1L);
        Team team = new Team(teamId, "team1");

        //when
        teamRepository.save(team);
        entityManager.flush();
        entityManager.clear();

        //then
        Team freshTeam = teamRepository.findById(TeamId.of(team.getId().getValue())).orElseThrow();
        assertThat(freshTeam.getId()).isEqualTo(team.getId());
        assertThat(freshTeam.getName()).isEqualTo(team.getName());
    }

}
